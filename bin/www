#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('site-jubao:server');
const https = require('https');
const http = require('http');
const fs = require('fs');
const config = require("../config.json").server;

/**
 * Event listener for HTTP server "listening" event.
 */

const onServerListening = server => () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.port || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const  httpServer = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
httpServer.listen(config.httpPort);
httpServer.on('error', onError);
httpServer.on('listening', onServerListening(httpServer)); 


if (config.useHTTPS) {
  const certificate = fs.readFileSync(config.httpsConfig.certificateFile, 'utf8');
  const privateKey = fs.readFileSync(config.httpsConfig.privateKeyFile, 'utf8');
  const credentials = {key: privateKey, cert: certificate};
  const server = https.createServer(credentials, app);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onServerListening(server)); 
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}